var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var GlobalizationOriginal = /** @class */ (function (_super) {
    __extends(GlobalizationOriginal, _super);
    function GlobalizationOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalizationOriginal.prototype.getPreferredLanguage = function () { return cordova(this, "getPreferredLanguage", {}, arguments); };
    GlobalizationOriginal.prototype.getLocaleName = function () { return cordova(this, "getLocaleName", {}, arguments); };
    GlobalizationOriginal.prototype.dateToString = function (date, options) { return cordova(this, "dateToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.stringToDate = function (dateString, options) { return cordova(this, "stringToDate", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.getDatePattern = function (options) { return cordova(this, "getDatePattern", { "callbackOrder": "reverse" }, arguments); };
    GlobalizationOriginal.prototype.getDateNames = function (options) { return cordova(this, "getDateNames", { "callbackOrder": "reverse" }, arguments); };
    GlobalizationOriginal.prototype.isDayLightSavingsTime = function (date) { return cordova(this, "isDayLightSavingsTime", {}, arguments); };
    GlobalizationOriginal.prototype.getFirstDayOfWeek = function () { return cordova(this, "getFirstDayOfWeek", {}, arguments); };
    GlobalizationOriginal.prototype.numberToString = function (numberToConvert, options) { return cordova(this, "numberToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.stringToNumber = function (stringToConvert, options) { return cordova(this, "stringToNumber", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    GlobalizationOriginal.prototype.getNumberPattern = function (options) { return cordova(this, "getNumberPattern", { "callbackOrder": "reverse" }, arguments); };
    GlobalizationOriginal.prototype.getCurrencyPattern = function (currencyCode) { return cordova(this, "getCurrencyPattern", {}, arguments); };
    GlobalizationOriginal.pluginName = "Globalization";
    GlobalizationOriginal.plugin = "cordova-plugin-globalization";
    GlobalizationOriginal.pluginRef = "navigator.globalization";
    GlobalizationOriginal.repo = "https://github.com/apache/cordova-plugin-globalization";
    GlobalizationOriginal.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    return GlobalizationOriginal;
}(IonicNativePlugin));
var Globalization = new GlobalizationOriginal();
export { Globalization };
//# sourceMappingURL=data:application/json;base64,