var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ASAuthorizationAppleIDRequest = /** @class */ (function () {
    function ASAuthorizationAppleIDRequest() {
    }
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeFullName = 0;
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeEmail = 1;
    return ASAuthorizationAppleIDRequest;
}());
export { ASAuthorizationAppleIDRequest };
var SignInWithAppleOriginal = /** @class */ (function (_super) {
    __extends(SignInWithAppleOriginal, _super);
    function SignInWithAppleOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SignInWithAppleOriginal.prototype.signin = function (options) {
        if (options === void 0) { options = {}; }
        return cordova(this, "signin", {}, arguments);
    };
    SignInWithAppleOriginal.pluginName = "Sign in with Apple";
    SignInWithAppleOriginal.plugin = "cordova-plugin-sign-in-with-apple";
    SignInWithAppleOriginal.pluginRef = "cordova.plugins.SignInWithApple";
    SignInWithAppleOriginal.repo = "https://github.com/twogate/cordova-plugin-sign-in-with-apple";
    SignInWithAppleOriginal.platforms = ["iOS"];
    return SignInWithAppleOriginal;
}(IonicNativePlugin));
var SignInWithApple = new SignInWithAppleOriginal();
export { SignInWithApple };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NpZ24taW4td2l0aC1hcHBsZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7OztJQU10RCwwREFBNEIsR0FBRyxDQUFDLENBQUM7SUFDakMsdURBQXlCLEdBQUcsQ0FBQyxDQUFDO3dDQVJoRDs7U0FNYSw2QkFBNkI7O0lBNEpMLG1DQUFpQjs7OztJQVVwRCxnQ0FBTSxhQUFDLE9BQTJDO1FBQTNDLHdCQUFBLEVBQUEsWUFBMkM7Ozs7Ozs7OzBCQTVLcEQ7RUFrS3FDLGlCQUFpQjtTQUF6QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hdXRoZW50aWNhdGlvbnNlcnZpY2VzL2FzYXV0aG9yaXphdGlvbmFwcGxlaWRyZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBBU0F1dGhvcml6YXRpb25BcHBsZUlEUmVxdWVzdCB7XG4gIHN0YXRpYyByZWFkb25seSBBU0F1dGhvcml6YXRpb25TY29wZUZ1bGxOYW1lID0gMDtcbiAgc3RhdGljIHJlYWRvbmx5IEFTQXV0aG9yaXphdGlvblNjb3BlRW1haWwgPSAxO1xuXG4gIHJlcXVlc3RlZFNjb3Blcz86IG51bWJlcltdO1xufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vZm91bmRhdGlvbi9uc3BlcnNvbm5hbWVjb21wb25lbnRzLzE0MTIxOTMtcGhvbmV0aWNyZXByZXNlbnRhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5TUGVyc29uTmFtZUNvbXBvbmVudHMge1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgYSBuYW1l4oCZcyBmdWxsIGZvcm0gb2YgYWRkcmVzcyB0aGF0IHByZWNlZGVzIHRoZSBuYW1lIGl0c2VsZiAoZm9yIGV4YW1wbGUsIFwiRHIuLFwiIFwiTXIuLFwiIFwiTXMuXCIpXG4gICAqL1xuICBuYW1lUHJlZml4Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIGJlc3Rvd2VkIHVwb24gYW4gaW5kaXZpZHVhbCB0byBkaWZmZXJlbnRpYXRlIHRoZW0gZnJvbSBvdGhlciBtZW1iZXJzIG9mIGEgZ3JvdXAgdGhhdCBzaGFyZSBhIGZhbWlseSBuYW1lIChmb3IgZXhhbXBsZSwgXCJKb2huYXRoYW5cIilcbiAgICovXG4gIGdpdmVuTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogU2Vjb25kYXJ5IG5hbWUgYmVzdG93ZWQgdXBvbiBhbiBpbmRpdmlkdWFsIHRvIGRpZmZlcmVudGlhdGUgdGhlbSBmcm9tIG90aGVycyB0aGF0IGhhdmUgdGhlIHNhbWUgZ2l2ZW4gbmFtZSAoZm9yIGV4YW1wbGUsIFwiTWFwbGVcIilcbiAgICovXG4gIG1pZGRsZU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWUgYmVzdG93ZWQgdXBvbiBhbiBpbmRpdmlkdWFsIHRvIGRlbm90ZSBtZW1iZXJzaGlwIGluIGEgZ3JvdXAgb3IgZmFtaWx5LiAoZm9yIGV4YW1wbGUsIFwiQXBwbGVzZWVkXCIpXG4gICAqL1xuICBmYW1pbHlOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiBhIG5hbWXigJlzIGZ1bGwgZm9ybSBvZiBhZGRyZXNzIHRoYXQgZm9sbG93cyB0aGUgbmFtZSBpdHNlbGYgKGZvciBleGFtcGxlLCBcIkVzcS4sXCIgXCJKci4sXCIgXCJQaC5ELlwiKVxuICAgKi9cbiAgbmFtZVN1ZmZpeD86IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZSBzdWJzdGl0dXRlZCBmb3IgdGhlIHB1cnBvc2VzIG9mIGZhbWlsaWFyaXR5IChmb3IgZXhhbXBsZSwgXCJKb2hubnlcIilcbiAgICovXG4gIG5pY2tuYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcGhvbmV0aWMgcmVwcmVzZW50YXRpb24gbmFtZSBjb21wb25lbnRzIG9mIHRoZSByZWNlaXZlclxuICAgKi9cbiAgcGhvbmV0aWNSZXByZXNlbnRhdGlvbj86IE5TUGVyc29uTmFtZUNvbXBvbmVudHM7XG59XG5cbi8qKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hdXRoZW50aWNhdGlvbnNlcnZpY2VzL2FzYXV0aG9yaXphdGlvbmFwcGxlaWRjcmVkZW50aWFsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGVTaWduSW5SZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgdXNlcuKAmXMgZW1haWwgYWRkcmVzcyBpLmUuIGFiY0Bwcml2YXRlcmVsYXkuYXBwbGVpZC5jb21cbiAgICovXG4gIGVtYWlsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBbiBhcmJpdHJhcnkgc3RyaW5nIHRoYXQgeW91ciBhcHAgcHJvdmlkZWQgdG8gdGhlIHJlcXVlc3QgdGhhdCBnZW5lcmF0ZWQgdGhlIGNyZWRlbnRpYWxcbiAgICovXG4gIHN0YXRlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIEpTT04gV2ViIFRva2VuIChKV1QpIHRoYXQgc2VjdXJlbHkgY29tbXVuaWNhdGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIHRvIHlvdXIgYXBwXG4gICAqL1xuICBpZGVudGl0eVRva2VuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc2hvcnQtbGl2ZWQgdG9rZW4gdXNlZCBieSB5b3VyIGFwcCBmb3IgcHJvb2Ygb2YgYXV0aG9yaXphdGlvbiB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIGFwcCdzIHNlcnZlciBjb3VudGVycGFydFxuICAgKi9cbiAgYXV0aG9yaXphdGlvbkNvZGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHVzZXIncyBuYW1lXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vZm91bmRhdGlvbi9uc3BlcnNvbm5hbWVjb21wb25lbnRzP2xhbmd1YWdlPW9iamNcbiAgICovXG4gIGZ1bGxOYW1lPzogTlNQZXJzb25OYW1lQ29tcG9uZW50cztcblxuICAvKipcbiAgICogQW4gaWRlbnRpZmllciBhc3NvY2lhdGVkIHdpdGggdGhlIGF1dGhlbnRpY2F0ZWQgdXNlclxuICAgKi9cbiAgdXNlcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2ZvdW5kYXRpb24vbnNlcnJvclxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5TRXJyb3Ige1xuICAvKipcbiAgICogVGhlIGVycm9yIGNvZGVcbiAgICovXG4gIGNvZGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGxvY2FsaXplZCBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAgICovXG4gIGxvY2FsaXplZERlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHN0cmluZyBjb250YWluaW5nIHRoZSBsb2NhbGl6ZWQgZXhwbGFuYXRpb24gb2YgdGhlIHJlYXNvbiBmb3IgdGhlIGVycm9yXG4gICAqL1xuICBsb2NhbGl6ZWRGYWlsdXJlUmVhc29uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcGxlU2lnbkluRXJyb3JSZXNwb25zZSBleHRlbmRzIE5TRXJyb3Ige1xuICAvKipcbiAgICogVGhlIGVycm9yIGkuZS4gXCJBU0FVVEhPUklaQVRJT05fRVJST1JcIlxuICAgKi9cbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgU2lnbiBJbiBXaXRoIEFwcGxlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNpZ24gaW4gd2l0aCBBcHBsZSBtYWtlcyBpdCBlYXN5IGZvciB1c2VycyB0byBzaWduIGluIHRvIHlvdXIgYXBwcyBhbmQgd2Vic2l0ZXMgdXNpbmcgdGhlaXIgQXBwbGUgSUQuXG4gKiBJbnN0ZWFkIG9mIGZpbGxpbmcgb3V0IGZvcm1zLCB2ZXJpZnlpbmcgZW1haWwgYWRkcmVzc2VzLCBhbmQgY2hvb3NpbmcgbmV3IHBhc3N3b3JkcyxcbiAqIHRoZXkgY2FuIHVzZSBTaWduIGluIHdpdGggQXBwbGUgdG8gc2V0IHVwIGFuIGFjY291bnQgYW5kIHN0YXJ0IHVzaW5nIHlvdXIgYXBwIHJpZ2h0IGF3YXkuXG4gKiBBbGwgYWNjb3VudHMgYXJlIHByb3RlY3RlZCB3aXRoIHR3by1mYWN0b3IgYXV0aGVudGljYXRpb24gZm9yIHN1cGVyaW9yIHNlY3VyaXR5LFxuICogYW5kIEFwcGxlIHdpbGwgbm90IHRyYWNrIHVzZXJz4oCZIGFjdGl2aXR5IGluIHlvdXIgYXBwIG9yIHdlYnNpdGUuXG4gKiAqU291cmNlOiogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3NpZ24taW4td2l0aC1hcHBsZS9cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNpZ25JbldpdGhBcHBsZSwgQXBwbGVTaWduSW5SZXNwb25zZSwgQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlLCBBU0F1dGhvcml6YXRpb25BcHBsZUlEUmVxdWVzdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc2lnbi1pbi13aXRoLWFwcGxlL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgc2lnbkluV2l0aEFwcGxlOiBTaWduSW5XaXRoQXBwbGUpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiAgIHRoaXMuc2lnbkluV2l0aEFwcGxlLnNpZ25pbih7XG4gKiAgICAgcmVxdWVzdGVkU2NvcGVzOiBbXG4gKiAgICAgICBBU0F1dGhvcml6YXRpb25BcHBsZUlEUmVxdWVzdC5BU0F1dGhvcml6YXRpb25TY29wZUZ1bGxOYW1lLFxuICogICAgICAgQVNBdXRob3JpemF0aW9uQXBwbGVJRFJlcXVlc3QuQVNBdXRob3JpemF0aW9uU2NvcGVFbWFpbFxuICogICAgIF1cbiAqICAgfSlcbiAqICAgLnRoZW4oKHJlczogQXBwbGVTaWduSW5SZXNwb25zZSkgPT4ge1xuICogICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3NpZ25pbndpdGhhcHBsZXJlc3RhcGkvdmVyaWZ5aW5nX2FfdXNlclxuICogICAgIGFsZXJ0KCdTZW5kIHRva2VuIHRvIGFwcGxlIGZvciB2ZXJpZmljYXRpb246ICcgKyByZXMuaWRlbnRpdHlUb2tlbik7XG4gKiAgICAgY29uc29sZS5sb2cocmVzKTtcbiAqICAgfSlcbiAqICAgLmNhdGNoKChlcnJvcjogQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlKSA9PiB7XG4gKiAgICAgYWxlcnQoZXJyb3IuY29kZSArICcgJyArIGVycm9yLmxvY2FsaXplZERlc2NyaXB0aW9uKTtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAqICAgfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2lnbiBpbiB3aXRoIEFwcGxlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2lnbi1pbi13aXRoLWFwcGxlJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLlNpZ25JbldpdGhBcHBsZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdHdvZ2F0ZS9jb3Jkb3ZhLXBsdWdpbi1zaWduLWluLXdpdGgtYXBwbGUnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2lnbkluV2l0aEFwcGxlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGF1dGhvcml6YXRpb24gZmxvd3MgbmFtZWQgZHVyaW5nIGNvbnRyb2xsZXIgaW5pdGlhbGl6YXRpb25cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hdXRoZW50aWNhdGlvbnNlcnZpY2VzL2FzYXV0aG9yaXphdGlvbmNvbnRyb2xsZXIvMzE1MzA0Ny1wZXJmb3JtcmVxdWVzdHNcbiAgICogQHJldHVybiB7UHJvbWlzZTxBcHBsZVNpZ25JblJlc3BvbnNlPn0gUmV0dXJucyBhIHByb21pc2Ugd2hlbiBhdXRob3JpemF0aW9uIHN1Y2NlZWRzXG4gICAqIEBwYXJhbSB7QVNBdXRob3JpemF0aW9uQXBwbGVJRFJlcXVlc3R9IG9wdGlvbnNcbiAgICogQHRocm93cyBBcHBsZVNpZ25JbkVycm9yUmVzcG9uc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2lnbmluKG9wdGlvbnM6IEFTQXV0aG9yaXphdGlvbkFwcGxlSURSZXF1ZXN0ID0ge30pOiBQcm9taXNlPEFwcGxlU2lnbkluUmVzcG9uc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxufVxuIl19