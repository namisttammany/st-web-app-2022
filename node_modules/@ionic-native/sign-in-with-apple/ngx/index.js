import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var ASAuthorizationAppleIDRequest = /** @class */ (function () {
    function ASAuthorizationAppleIDRequest() {
    }
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeFullName = 0;
    ASAuthorizationAppleIDRequest.ASAuthorizationScopeEmail = 1;
    return ASAuthorizationAppleIDRequest;
}());
export { ASAuthorizationAppleIDRequest };
var SignInWithApple = /** @class */ (function (_super) {
    __extends(SignInWithApple, _super);
    function SignInWithApple() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SignInWithApple.prototype.signin = function (options) {
        if (options === void 0) { options = {}; }
        return cordova(this, "signin", {}, arguments);
    };
    SignInWithApple.pluginName = "Sign in with Apple";
    SignInWithApple.plugin = "cordova-plugin-sign-in-with-apple";
    SignInWithApple.pluginRef = "cordova.plugins.SignInWithApple";
    SignInWithApple.repo = "https://github.com/twogate/cordova-plugin-sign-in-with-apple";
    SignInWithApple.platforms = ["iOS"];
    SignInWithApple = __decorate([
        Injectable()
    ], SignInWithApple);
    return SignInWithApple;
}(IonicNativePlugin));
export { SignInWithApple };
//# sourceMappingURL=data:application/json;base64,