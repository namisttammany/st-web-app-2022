import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LaunchNavigator = /** @class */ (function (_super) {
    __extends(LaunchNavigator, _super);
    function LaunchNavigator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.APP = {
            USER_SELECT: 'user_select',
            APPLE_MAPS: 'apple_maps',
            GOOGLE_MAPS: 'google_maps',
            WAZE: 'waze',
            CITYMAPPER: 'citymapper',
            NAVIGON: 'navigon',
            TRANSIT_APP: 'transit_app',
            YANDEX: 'yandex',
            UBER: 'uber',
            TOMTOM: 'tomtom',
            BING_MAPS: 'bing_maps',
            SYGIC: 'sygic',
            HERE_MAPS: 'here_maps',
            MOOVIT: 'moovit',
        };
        _this.TRANSPORT_MODE = {
            DRIVING: 'driving',
            WALKING: 'walking',
            BICYCLING: 'bicycling',
            TRANSIT: 'transit',
        };
        return _this;
    }
    LaunchNavigator.prototype.navigate = function (destination, options) { return cordova(this, "navigate", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    LaunchNavigator.prototype.isAppAvailable = function (app) { return cordova(this, "isAppAvailable", {}, arguments); };
    LaunchNavigator.prototype.availableApps = function () { return cordova(this, "availableApps", {}, arguments); };
    LaunchNavigator.prototype.getAppDisplayName = function (app) { return cordova(this, "getAppDisplayName", { "sync": true }, arguments); };
    LaunchNavigator.prototype.getAppsForPlatform = function (platform) { return cordova(this, "getAppsForPlatform", { "sync": true }, arguments); };
    LaunchNavigator.prototype.supportsTransportMode = function (app, platform) { return cordova(this, "supportsTransportMode", { "sync": true }, arguments); };
    LaunchNavigator.prototype.getTransportModes = function (app, platform) { return cordova(this, "getTransportModes", { "sync": true }, arguments); };
    LaunchNavigator.prototype.supportsDestName = function (app, platform) { return cordova(this, "supportsDestName", { "sync": true }, arguments); };
    LaunchNavigator.prototype.supportsStart = function (app, platform) { return cordova(this, "supportsStart", { "sync": true }, arguments); };
    LaunchNavigator.prototype.supportsStartName = function (app, platform) { return cordova(this, "supportsStartName", { "sync": true }, arguments); };
    LaunchNavigator.prototype.supportsLaunchMode = function (app, platform) { return cordova(this, "supportsLaunchMode", { "sync": true }, arguments); };
    LaunchNavigator.prototype.userSelect = function (destination, options) { return cordova(this, "userSelect", { "sync": true }, arguments); };
    LaunchNavigator.pluginName = "LaunchNavigator";
    LaunchNavigator.plugin = "uk.co.workingedge.phonegap.plugin.launchnavigator";
    LaunchNavigator.pluginRef = "launchnavigator";
    LaunchNavigator.repo = "https://github.com/dpa99c/phonegap-launch-navigator";
    LaunchNavigator.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    LaunchNavigator = __decorate([
        Injectable()
    ], LaunchNavigator);
    return LaunchNavigator;
}(IonicNativePlugin));
export { LaunchNavigator };
//# sourceMappingURL=data:application/json;base64,