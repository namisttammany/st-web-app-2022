{"version":3,"sources":["node_modules/@ionic/core/dist/esm/index-69c37885.js"],"names":[],"mappings":"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","sourcesContent":["const transitionEnd = (el, callback) => {\n    let unRegTrans;\n    const opts = { passive: true };\n    const unregister = () => {\n        if (unRegTrans) {\n            unRegTrans();\n        }\n    };\n    const onTransitionEnd = (ev) => {\n        if (el === ev.target) {\n            unregister();\n            callback(ev);\n        }\n    };\n    if (el) {\n        el.addEventListener('webkitTransitionEnd', onTransitionEnd, opts);\n        el.addEventListener('transitionend', onTransitionEnd, opts);\n        unRegTrans = () => {\n            el.removeEventListener('webkitTransitionEnd', onTransitionEnd, opts);\n            el.removeEventListener('transitionend', onTransitionEnd, opts);\n        };\n    }\n    return unregister;\n};\n\nconst CSS_VALUE_REGEX = /(^-?\\d*\\.?\\d*)(.*)/;\nconst DURATION_MIN = 32;\nconst TRANSITION_END_FALLBACK_PADDING_MS = 400;\nconst TRANSFORM_PROPS = {\n    'translateX': 1,\n    'translateY': 1,\n    'translateZ': 1,\n    'scale': 1,\n    'scaleX': 1,\n    'scaleY': 1,\n    'scaleZ': 1,\n    'rotate': 1,\n    'rotateX': 1,\n    'rotateY': 1,\n    'rotateZ': 1,\n    'skewX': 1,\n    'skewY': 1,\n    'perspective': 1\n};\nconst win = typeof window !== 'undefined' ? window : {};\nconst raf = win.requestAnimationFrame\n    ? win.requestAnimationFrame.bind(win)\n    : (f) => f(Date.now());\nclass Animator {\n    constructor() {\n        this._hasDur = false;\n        this._hasTweenEffect = false;\n        this._isAsync = false;\n        this._isReverse = false;\n        this._destroyed = false;\n        this.hasChildren = false;\n        this.isPlaying = false;\n        this.hasCompleted = false;\n    }\n    addElement(el) {\n        if (el != null) {\n            if (el.length > 0) {\n                for (let i = 0; i < el.length; i++) {\n                    this._addEl(el[i]);\n                }\n            }\n            else {\n                this._addEl(el);\n            }\n        }\n        return this;\n    }\n    /**\n     * NO DOM\n     */\n    _addEl(el) {\n        if (el.nodeType === 1) {\n            (this._elements = this._elements || []).push(el);\n        }\n    }\n    /**\n     * Add a child animation to this animation.\n     */\n    add(childAnimation) {\n        childAnimation.parent = this;\n        this.hasChildren = true;\n        (this._childAnimations = this._childAnimations || []).push(childAnimation);\n        return this;\n    }\n    /**\n     * Get the duration of this animation. If this animation does\n     * not have a duration, then it'll get the duration from its parent.\n     */\n    getDuration(opts) {\n        if (opts && opts.duration !== undefined) {\n            return opts.duration;\n        }\n        else if (this._duration !== undefined) {\n            return this._duration;\n        }\n        else if (this.parent) {\n            return this.parent.getDuration();\n        }\n        return 0;\n    }\n    /**\n     * Returns if the animation is a root one.\n     */\n    isRoot() {\n        return !this.parent;\n    }\n    /**\n     * Set the duration for this animation.\n     */\n    duration(milliseconds) {\n        this._duration = milliseconds;\n        return this;\n    }\n    /**\n     * Get the easing of this animation. If this animation does\n     * not have an easing, then it'll get the easing from its parent.\n     */\n    getEasing() {\n        if (this._isReverse && this._reversedEasingName !== undefined) {\n            return this._reversedEasingName;\n        }\n        return this._easingName !== undefined ? this._easingName : (this.parent && this.parent.getEasing()) || null;\n    }\n    /**\n     * Set the easing for this animation.\n     */\n    easing(name) {\n        this._easingName = name;\n        return this;\n    }\n    /**\n     * Set the easing for this reversed animation.\n     */\n    easingReverse(name) {\n        this._reversedEasingName = name;\n        return this;\n    }\n    /**\n     * Add the \"from\" value for a specific property.\n     */\n    from(prop, val) {\n        this._addProp('from', prop, val);\n        return this;\n    }\n    /**\n     * Add the \"to\" value for a specific property.\n     */\n    to(prop, val, clearProperyAfterTransition = false) {\n        const fx = this._addProp('to', prop, val);\n        if (clearProperyAfterTransition) {\n            // if this effect is a transform then clear the transform effect\n            // otherwise just clear the actual property\n            this.afterClearStyles(fx.trans ? ['transform', '-webkit-transform'] : [prop]);\n        }\n        return this;\n    }\n    /**\n     * Shortcut to add both the \"from\" and \"to\" for the same property.\n     */\n    fromTo(prop, fromVal, toVal, clearProperyAfterTransition) {\n        return this.from(prop, fromVal).to(prop, toVal, clearProperyAfterTransition);\n    }\n    /**\n     * NO DOM\n     */\n    _getProp(name) {\n        if (this._fxProperties) {\n            return this._fxProperties.find(prop => prop.effectName === name);\n        }\n        return undefined;\n    }\n    _addProp(state, prop, val) {\n        let fxProp = this._getProp(prop);\n        if (!fxProp) {\n            // first time we've see this EffectProperty\n            const shouldTrans = (TRANSFORM_PROPS[prop] === 1);\n            fxProp = {\n                effectName: prop,\n                trans: shouldTrans,\n                // add the will-change property for transforms or opacity\n                wc: (shouldTrans ? 'transform' : prop)\n            };\n            (this._fxProperties = this._fxProperties || []).push(fxProp);\n        }\n        // add from/to EffectState to the EffectProperty\n        const fxState = {\n            val,\n            num: 0,\n            effectUnit: '',\n        };\n        fxProp[state] = fxState;\n        if (typeof val === 'string' && val.indexOf(' ') < 0) {\n            const r = val.match(CSS_VALUE_REGEX);\n            if (r) {\n                const num = parseFloat(r[1]);\n                if (!isNaN(num)) {\n                    fxState.num = num;\n                }\n                fxState.effectUnit = (r[0] !== r[2] ? r[2] : '');\n            }\n        }\n        else if (typeof val === 'number') {\n            fxState.num = val;\n        }\n        return fxProp;\n    }\n    /**\n     * Add CSS class to this animation's elements\n     * before the animation begins.\n     */\n    beforeAddClass(className) {\n        (this._beforeAddClasses = this._beforeAddClasses || []).push(className);\n        return this;\n    }\n    /**\n     * Remove CSS class from this animation's elements\n     * before the animation begins.\n     */\n    beforeRemoveClass(className) {\n        (this._beforeRemoveClasses = this._beforeRemoveClasses || []).push(className);\n        return this;\n    }\n    /**\n     * Set CSS inline styles to this animation's elements\n     * before the animation begins.\n     */\n    beforeStyles(styles) {\n        this._beforeStyles = styles;\n        return this;\n    }\n    /**\n     * Clear CSS inline styles from this animation's elements\n     * before the animation begins.\n     */\n    beforeClearStyles(propertyNames) {\n        this._beforeStyles = this._beforeStyles || {};\n        for (const prop of propertyNames) {\n            this._beforeStyles[prop] = '';\n        }\n        return this;\n    }\n    /**\n     * Add a function which contains DOM reads, which will run\n     * before the animation begins.\n     */\n    beforeAddRead(domReadFn) {\n        (this._readCallbacks = this._readCallbacks || []).push(domReadFn);\n        return this;\n    }\n    /**\n     * Add a function which contains DOM writes, which will run\n     * before the animation begins.\n     */\n    beforeAddWrite(domWriteFn) {\n        (this._writeCallbacks = this._writeCallbacks || []).push(domWriteFn);\n        return this;\n    }\n    /**\n     * Add CSS class to this animation's elements\n     * after the animation finishes.\n     */\n    afterAddClass(className) {\n        (this._afterAddClasses = this._afterAddClasses || []).push(className);\n        return this;\n    }\n    /**\n     * Remove CSS class from this animation's elements\n     * after the animation finishes.\n     */\n    afterRemoveClass(className) {\n        (this._afterRemoveClasses = this._afterRemoveClasses || []).push(className);\n        return this;\n    }\n    /**\n     * Set CSS inline styles to this animation's elements\n     * after the animation finishes.\n     */\n    afterStyles(styles) {\n        this._afterStyles = styles;\n        return this;\n    }\n    /**\n     * Clear CSS inline styles from this animation's elements\n     * after the animation finishes.\n     */\n    afterClearStyles(propertyNames) {\n        this._afterStyles = this._afterStyles || {};\n        for (const prop of propertyNames) {\n            this._afterStyles[prop] = '';\n        }\n        return this;\n    }\n    /**\n     * Play the animation.\n     */\n    play(opts) {\n        // If the animation was already invalidated (it did finish), do nothing\n        if (this._destroyed) {\n            return;\n        }\n        // this is the top level animation and is in full control\n        // of when the async play() should actually kick off\n        // if there is no duration then it'll set the TO property immediately\n        // if there is a duration, then it'll stage all animations at the\n        // FROM property and transition duration, wait a few frames, then\n        // kick off the animation by setting the TO property for each animation\n        this._isAsync = this._hasDuration(opts);\n        // ensure all past transition end events have been cleared\n        this._clearAsync();\n        // recursively kicks off the correct progress step for each child animation\n        // ******** DOM WRITE ****************\n        this._playInit(opts);\n        // doubling up RAFs since this animation was probably triggered\n        // from an input event, and just having one RAF would have this code\n        // run within the same frame as the triggering input event, and the\n        // input event probably already did way too much work for one frame\n        raf(() => {\n            raf(() => {\n                this._playDomInspect(opts);\n            });\n        });\n    }\n    playAsync(opts) {\n        return new Promise(resolve => {\n            this.onFinish(resolve, { oneTimeCallback: true, clearExistingCallbacks: true });\n            this.play(opts);\n            return this;\n        });\n    }\n    playSync() {\n        // If the animation was already invalidated (it did finish), do nothing\n        if (!this._destroyed) {\n            const opts = { duration: 0 };\n            this._isAsync = false;\n            this._clearAsync();\n            this._playInit(opts);\n            this._playDomInspect(opts);\n        }\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _playInit(opts) {\n        // always default that an animation does not tween\n        // a tween requires that an Animation class has an element\n        // and that it has at least one FROM/TO effect\n        // and that the FROM/TO effect can tween numeric values\n        this._hasTweenEffect = false;\n        this.isPlaying = true;\n        this.hasCompleted = false;\n        this._hasDur = (this.getDuration(opts) > DURATION_MIN);\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child._playInit(opts);\n            }\n        }\n        if (this._hasDur) {\n            // if there is a duration then we want to start at step 0\n            // ******** DOM WRITE ****************\n            this._progress(0);\n            // add the will-change properties\n            // ******** DOM WRITE ****************\n            this._willChange(true);\n        }\n    }\n    /**\n     * DOM WRITE\n     * NO RECURSION\n     * ROOT ANIMATION\n     */\n    _playDomInspect(opts) {\n        // fire off all the \"before\" function that have DOM READS in them\n        // elements will be in the DOM, however visibily hidden\n        // so we can read their dimensions if need be\n        // ******** DOM READ ****************\n        // ******** DOM WRITE ****************\n        this._beforeAnimation();\n        // for the root animation only\n        // set the async TRANSITION END event\n        // and run onFinishes when the transition ends\n        const dur = this.getDuration(opts);\n        if (this._isAsync) {\n            this._asyncEnd(dur, true);\n        }\n        // ******** DOM WRITE ****************\n        this._playProgress(opts);\n        if (this._isAsync && !this._destroyed) {\n            // this animation has a duration so we need another RAF\n            // for the CSS TRANSITION properties to kick in\n            raf(() => {\n                this._playToStep(1);\n            });\n        }\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _playProgress(opts) {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child._playProgress(opts);\n            }\n        }\n        if (this._hasDur) {\n            // set the CSS TRANSITION duration/easing\n            // ******** DOM WRITE ****************\n            this._setTrans(this.getDuration(opts), false);\n        }\n        else {\n            // this animation does not have a duration, so it should not animate\n            // just go straight to the TO properties and call it done\n            // ******** DOM WRITE ****************\n            this._progress(1);\n            // since there was no animation, immediately run the after\n            // ******** DOM WRITE ****************\n            this._setAfterStyles();\n            // this animation has no duration, so it has finished\n            // other animations could still be running\n            this._didFinish(true);\n        }\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _playToStep(stepValue) {\n        if (!this._destroyed) {\n            const children = this._childAnimations;\n            if (children) {\n                for (const child of children) {\n                    // ******** DOM WRITE ****************\n                    child._playToStep(stepValue);\n                }\n            }\n            if (this._hasDur) {\n                // browser had some time to render everything in place\n                // and the transition duration/easing is set\n                // now set the TO properties which will trigger the transition to begin\n                // ******** DOM WRITE ****************\n                this._progress(stepValue);\n            }\n        }\n    }\n    /**\n     * DOM WRITE\n     * NO RECURSION\n     * ROOT ANIMATION\n     */\n    _asyncEnd(dur, shouldComplete) {\n        const self = this;\n        const onTransitionEnd = () => {\n            // congrats! a successful transition completed!\n            // ensure transition end events and timeouts have been cleared\n            self._clearAsync();\n            // ******** DOM WRITE ****************\n            self._playEnd();\n            // transition finished\n            self._didFinishAll(shouldComplete, true, false);\n        };\n        const onTransitionFallback = () => {\n            // oh noz! the transition end event didn't fire in time!\n            // instead the fallback timer when first\n            // if all goes well this fallback should never fire\n            // clear the other async end events from firing\n            self._timerId = undefined;\n            self._clearAsync();\n            // set the after styles\n            // ******** DOM WRITE ****************\n            self._playEnd(shouldComplete ? 1 : 0);\n            // transition finished\n            self._didFinishAll(shouldComplete, true, false);\n        };\n        // set the TRANSITION END event on one of the transition elements\n        self._unregisterTrnsEnd = transitionEnd(self._transEl(), onTransitionEnd);\n        // set a fallback timeout if the transition end event never fires, or is too slow\n        // transition end fallback: (animation duration + XXms)\n        self._timerId = setTimeout(onTransitionFallback, (dur + TRANSITION_END_FALLBACK_PADDING_MS));\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _playEnd(stepValue) {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child._playEnd(stepValue);\n            }\n        }\n        if (this._hasDur) {\n            if (stepValue !== undefined) {\n                // too late to have a smooth animation, just finish it\n                // ******** DOM WRITE ****************\n                this._setTrans(0, true);\n                // ensure the ending progress step gets rendered\n                // ******** DOM WRITE ****************\n                this._progress(stepValue);\n            }\n            // set the after styles\n            // ******** DOM WRITE ****************\n            this._setAfterStyles();\n            // remove the will-change properties\n            // ******** DOM WRITE ****************\n            this._willChange(false);\n        }\n    }\n    /**\n     * NO DOM\n     * RECURSION\n     */\n    _hasDuration(opts) {\n        if (this.getDuration(opts) > DURATION_MIN) {\n            return true;\n        }\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                if (child._hasDuration(opts)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * NO DOM\n     * RECURSION\n     */\n    _hasDomReads() {\n        if (this._readCallbacks && this._readCallbacks.length > 0) {\n            return true;\n        }\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                if (child._hasDomReads()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Immediately stop at the end of the animation.\n     */\n    stop(stepValue = 1) {\n        // ensure all past transition end events have been cleared\n        this._clearAsync();\n        this._hasDur = true;\n        this._playEnd(stepValue);\n    }\n    /**\n     * NO DOM\n     * NO RECURSION\n     */\n    _clearAsync() {\n        if (this._unregisterTrnsEnd) {\n            this._unregisterTrnsEnd();\n        }\n        if (this._timerId) {\n            clearTimeout(this._timerId);\n        }\n        this._timerId = this._unregisterTrnsEnd = undefined;\n    }\n    /**\n     * DOM WRITE\n     * NO RECURSION\n     */\n    _progress(stepValue) {\n        // bread 'n butter\n        let val;\n        const elements = this._elements;\n        const effects = this._fxProperties;\n        if (!elements || elements.length === 0 || !effects || this._destroyed) {\n            return;\n        }\n        // flip the number if we're going in reverse\n        if (this._isReverse) {\n            stepValue = 1 - stepValue;\n        }\n        let i = 0;\n        let j = 0;\n        let finalTransform = '';\n        let fx;\n        for (i = 0; i < effects.length; i++) {\n            fx = effects[i];\n            if (fx.from && fx.to) {\n                const fromNum = fx.from.num;\n                const toNum = fx.to.num;\n                const tweenEffect = (fromNum !== toNum);\n                if (tweenEffect) {\n                    this._hasTweenEffect = true;\n                }\n                if (stepValue === 0) {\n                    // FROM\n                    val = fx.from.val;\n                }\n                else if (stepValue === 1) {\n                    // TO\n                    val = fx.to.val;\n                }\n                else if (tweenEffect) {\n                    // EVERYTHING IN BETWEEN\n                    const valNum = (((toNum - fromNum) * stepValue) + fromNum);\n                    const unit = fx.to.effectUnit;\n                    val = valNum + unit;\n                }\n                if (val !== null) {\n                    const prop = fx.effectName;\n                    if (fx.trans) {\n                        finalTransform += prop + '(' + val + ') ';\n                    }\n                    else {\n                        for (j = 0; j < elements.length; j++) {\n                            // ******** DOM WRITE ****************\n                            elements[j].style.setProperty(prop, val);\n                        }\n                    }\n                }\n            }\n        }\n        // place all transforms on the same property\n        if (finalTransform.length > 0) {\n            if (!this._isReverse && stepValue !== 1 || this._isReverse && stepValue !== 0) {\n                finalTransform += 'translateZ(0px)';\n            }\n            for (i = 0; i < elements.length; i++) {\n                // ******** DOM WRITE ****************\n                elements[i].style.setProperty('transform', finalTransform);\n                elements[i].style.setProperty('-webkit-transform', finalTransform);\n            }\n        }\n    }\n    /**\n     * DOM WRITE\n     * NO RECURSION\n     */\n    _setTrans(dur, forcedLinearEasing) {\n        // Transition is not enabled if there are not effects\n        const elements = this._elements;\n        if (!elements || elements.length === 0 || !this._fxProperties) {\n            return;\n        }\n        // set the TRANSITION properties inline on the element\n        const easing = (forcedLinearEasing ? 'linear' : this.getEasing());\n        const durString = dur + 'ms';\n        for (const { style } of elements) {\n            if (dur > 0) {\n                // ******** DOM WRITE ****************\n                style.transitionDuration = durString;\n                // each animation can have a different easing\n                if (easing !== null) {\n                    // ******** DOM WRITE ****************\n                    style.transitionTimingFunction = easing;\n                }\n            }\n            else {\n                style.transitionDuration = '0';\n            }\n        }\n    }\n    /**\n     * DOM READ\n     * DOM WRITE\n     * RECURSION\n     */\n    _beforeAnimation() {\n        // fire off all the \"before\" function that have DOM READS in them\n        // elements will be in the DOM, however visibily hidden\n        // so we can read their dimensions if need be\n        // ******** DOM READ ****************\n        this._fireBeforeReadFunc();\n        // ******** DOM READS ABOVE / DOM WRITES BELOW ****************\n        // fire off all the \"before\" function that have DOM WRITES in them\n        // ******** DOM WRITE ****************\n        this._fireBeforeWriteFunc();\n        // stage all of the before css classes and inline styles\n        // ******** DOM WRITE ****************\n        this._setBeforeStyles();\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _setBeforeStyles() {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                child._setBeforeStyles();\n            }\n        }\n        const elements = this._elements;\n        // before the animations have started\n        // only set before styles if animation is not reversed\n        if (!elements || elements.length === 0 || this._isReverse) {\n            return;\n        }\n        const addClasses = this._beforeAddClasses;\n        const removeClasses = this._beforeRemoveClasses;\n        for (const el of elements) {\n            const elementClassList = el.classList;\n            // css classes to add before the animation\n            if (addClasses) {\n                for (const c of addClasses) {\n                    // ******** DOM WRITE ****************\n                    elementClassList.add(c);\n                }\n            }\n            // css classes to remove before the animation\n            if (removeClasses) {\n                for (const c of removeClasses) {\n                    // ******** DOM WRITE ****************\n                    elementClassList.remove(c);\n                }\n            }\n            // inline styles to add before the animation\n            if (this._beforeStyles) {\n                for (const [key, value] of Object.entries(this._beforeStyles)) {\n                    // ******** DOM WRITE ****************\n                    el.style.setProperty(key, value);\n                }\n            }\n        }\n    }\n    /**\n     * DOM READ\n     * RECURSION\n     */\n    _fireBeforeReadFunc() {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM READ ****************\n                child._fireBeforeReadFunc();\n            }\n        }\n        const readFunctions = this._readCallbacks;\n        if (readFunctions) {\n            for (const callback of readFunctions) {\n                // ******** DOM READ ****************\n                callback();\n            }\n        }\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _fireBeforeWriteFunc() {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child._fireBeforeWriteFunc();\n            }\n        }\n        const writeFunctions = this._writeCallbacks;\n        if (writeFunctions) {\n            for (const callback of writeFunctions) {\n                // ******** DOM WRITE ****************\n                callback();\n            }\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _setAfterStyles() {\n        const elements = this._elements;\n        if (!elements) {\n            return;\n        }\n        for (const el of elements) {\n            const elementClassList = el.classList;\n            // remove the transition duration/easing\n            // ******** DOM WRITE ****************\n            el.style.transitionDuration = el.style.transitionTimingFunction = '';\n            if (this._isReverse) {\n                // finished in reverse direction\n                // css classes that were added before the animation should be removed\n                const beforeAddClasses = this._beforeAddClasses;\n                if (beforeAddClasses) {\n                    for (const c of beforeAddClasses) {\n                        elementClassList.remove(c);\n                    }\n                }\n                // css classes that were removed before the animation should be added\n                const beforeRemoveClasses = this._beforeRemoveClasses;\n                if (beforeRemoveClasses) {\n                    for (const c of beforeRemoveClasses) {\n                        elementClassList.add(c);\n                    }\n                }\n                // inline styles that were added before the animation should be removed\n                const beforeStyles = this._beforeStyles;\n                if (beforeStyles) {\n                    for (const propName of Object.keys(beforeStyles)) {\n                        // ******** DOM WRITE ****************\n                        el.style.removeProperty(propName);\n                    }\n                }\n            }\n            else {\n                // finished in forward direction\n                // css classes to add after the animation\n                const afterAddClasses = this._afterAddClasses;\n                if (afterAddClasses) {\n                    for (const c of afterAddClasses) {\n                        // ******** DOM WRITE ****************\n                        elementClassList.add(c);\n                    }\n                }\n                // css classes to remove after the animation\n                const afterRemoveClasses = this._afterRemoveClasses;\n                if (afterRemoveClasses) {\n                    for (const c of afterRemoveClasses) {\n                        // ******** DOM WRITE ****************\n                        elementClassList.remove(c);\n                    }\n                }\n                // inline styles to add after the animation\n                const afterStyles = this._afterStyles;\n                if (afterStyles) {\n                    for (const [key, value] of Object.entries(afterStyles)) {\n                        el.style.setProperty(key, value);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * DOM WRITE\n     * NO RECURSION\n     */\n    _willChange(addWillChange) {\n        let wc;\n        const effects = this._fxProperties;\n        let willChange;\n        if (addWillChange && effects) {\n            wc = [];\n            for (const effect of effects) {\n                const propWC = effect.wc;\n                if (propWC === 'webkitTransform') {\n                    wc.push('transform', '-webkit-transform');\n                }\n                else if (propWC !== undefined) {\n                    wc.push(propWC);\n                }\n            }\n            willChange = wc.join(',');\n        }\n        else {\n            willChange = '';\n        }\n        const elements = this._elements;\n        if (elements) {\n            for (const el of elements) {\n                // ******** DOM WRITE ****************\n                el.style.setProperty('will-change', willChange);\n            }\n        }\n    }\n    /**\n     * Start the animation with a user controlled progress.\n     */\n    progressStart() {\n        // ensure all past transition end events have been cleared\n        this._clearAsync();\n        // ******** DOM READ/WRITE ****************\n        this._beforeAnimation();\n        // ******** DOM WRITE ****************\n        this._progressStart();\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _progressStart() {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child._progressStart();\n            }\n        }\n        // force no duration, linear easing\n        // ******** DOM WRITE ****************\n        this._setTrans(0, true);\n        // ******** DOM WRITE ****************\n        this._willChange(true);\n    }\n    /**\n     * Set the progress step for this animation.\n     * progressStep() is not debounced, so it should not be called faster than 60FPS.\n     */\n    progressStep(stepValue) {\n        // only update if the last update was more than 16ms ago\n        stepValue = Math.min(1, Math.max(0, stepValue));\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child.progressStep(stepValue);\n            }\n        }\n        // ******** DOM WRITE ****************\n        this._progress(stepValue);\n    }\n    /**\n     * End the progress animation.\n     */\n    progressEnd(shouldComplete, currentStepValue, dur = -1) {\n        if (this._isReverse) {\n            // if the animation is going in reverse then\n            // flip the step value: 0 becomes 1, 1 becomes 0\n            currentStepValue = 1 - currentStepValue;\n        }\n        const stepValue = shouldComplete ? 1 : 0;\n        const diff = Math.abs(currentStepValue - stepValue);\n        if (dur < 0) {\n            dur = this._duration || 0;\n        }\n        else if (diff < 0.05) {\n            dur = 0;\n        }\n        this._isAsync = (dur > 30);\n        this._progressEnd(shouldComplete, stepValue, dur, this._isAsync);\n        if (this._isAsync) {\n            // for the root animation only\n            // set the async TRANSITION END event\n            // and run onFinishes when the transition ends\n            // ******** DOM WRITE ****************\n            this._asyncEnd(dur, shouldComplete);\n            // this animation has a duration so we need another RAF\n            // for the CSS TRANSITION properties to kick in\n            if (!this._destroyed) {\n                raf(() => {\n                    this._playToStep(stepValue);\n                });\n            }\n        }\n    }\n    /**\n     * DOM WRITE\n     * RECURSION\n     */\n    _progressEnd(shouldComplete, stepValue, dur, isAsync) {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                // ******** DOM WRITE ****************\n                child._progressEnd(shouldComplete, stepValue, dur, isAsync);\n            }\n        }\n        if (!isAsync) {\n            // stop immediately\n            // set all the animations to their final position\n            // ******** DOM WRITE ****************\n            this._progress(stepValue);\n            this._willChange(false);\n            this._setAfterStyles();\n            this._didFinish(shouldComplete);\n        }\n        else {\n            // animate it back to it's ending position\n            this.isPlaying = true;\n            this.hasCompleted = false;\n            this._hasDur = true;\n            // ******** DOM WRITE ****************\n            this._willChange(true);\n            this._setTrans(dur, false);\n        }\n    }\n    /**\n     * Add a callback to fire when the animation has finished.\n     */\n    onFinish(callback, opts) {\n        if (opts && opts.clearExistingCallbacks) {\n            this._onFinishCallbacks = this._onFinishOneTimeCallbacks = undefined;\n        }\n        if (opts && opts.oneTimeCallback) {\n            this._onFinishOneTimeCallbacks = this._onFinishOneTimeCallbacks || [];\n            this._onFinishOneTimeCallbacks.push(callback);\n        }\n        else {\n            this._onFinishCallbacks = this._onFinishCallbacks || [];\n            this._onFinishCallbacks.push(callback);\n        }\n        return this;\n    }\n    /**\n     * NO DOM\n     * RECURSION\n     */\n    _didFinishAll(hasCompleted, finishAsyncAnimations, finishNoDurationAnimations) {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                child._didFinishAll(hasCompleted, finishAsyncAnimations, finishNoDurationAnimations);\n            }\n        }\n        if (finishAsyncAnimations && this._isAsync || finishNoDurationAnimations && !this._isAsync) {\n            this._didFinish(hasCompleted);\n        }\n    }\n    /**\n     * NO RECURSION\n     */\n    _didFinish(hasCompleted) {\n        this.isPlaying = false;\n        this.hasCompleted = hasCompleted;\n        if (this._onFinishCallbacks) {\n            // run all finish callbacks\n            for (const callback of this._onFinishCallbacks) {\n                callback(this);\n            }\n        }\n        if (this._onFinishOneTimeCallbacks) {\n            // run all \"onetime\" finish callbacks\n            for (const callback of this._onFinishOneTimeCallbacks) {\n                callback(this);\n            }\n            this._onFinishOneTimeCallbacks.length = 0;\n        }\n    }\n    /**\n     * Reverse the animation.\n     */\n    reverse(shouldReverse = true) {\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                child.reverse(shouldReverse);\n            }\n        }\n        this._isReverse = !!shouldReverse;\n        return this;\n    }\n    /**\n     * Recursively destroy this animation and all child animations.\n     */\n    destroy() {\n        this._didFinish(false);\n        this._destroyed = true;\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                child.destroy();\n            }\n        }\n        this._clearAsync();\n        if (this._elements) {\n            this._elements.length = 0;\n        }\n        if (this._readCallbacks) {\n            this._readCallbacks.length = 0;\n        }\n        if (this._writeCallbacks) {\n            this._writeCallbacks.length = 0;\n        }\n        this.parent = undefined;\n        if (this._childAnimations) {\n            this._childAnimations.length = 0;\n        }\n        if (this._onFinishCallbacks) {\n            this._onFinishCallbacks.length = 0;\n        }\n        if (this._onFinishOneTimeCallbacks) {\n            this._onFinishOneTimeCallbacks.length = 0;\n        }\n    }\n    /**\n     * NO DOM\n     */\n    _transEl() {\n        // get the lowest level element that has an Animator\n        const children = this._childAnimations;\n        if (children) {\n            for (const child of children) {\n                const targetEl = child._transEl();\n                if (targetEl) {\n                    return targetEl;\n                }\n            }\n        }\n        return (this._hasTweenEffect &&\n            this._hasDur &&\n            this._elements !== undefined &&\n            this._elements.length > 0 ?\n            this._elements[0] : null);\n    }\n}\n\nconst create = (animationBuilder, baseEl, opts) => {\n    if (animationBuilder) {\n        return animationBuilder(Animator, baseEl, opts);\n    }\n    return Promise.resolve(new Animator());\n};\n\nexport { create };\n"],"sourceRoot":"webpack:///","file":"index-69c37885-js-es5.js"}